package net.mahdilamb.charts.net.mahdilamb.charts.plots;

import net.mahdilamb.charts.Axis;
import net.mahdilamb.charts.axes.NumericAxis;
import net.mahdilamb.charts.plots.AbstractRectangularPlot;
import net.mahdilamb.charts.net.mahdilamb.charts.series.Dataset;
import net.mahdilamb.charts.styles.Orientation;
import net.mahdilamb.colormap.RGBA;
import net.mahdilamb.charts.net.mahdilamb.charts.series.*;
import net.mahdilamb.utils.tuples.GenericTuple;
import net.mahdilamb.utils.tuples.Pair;

public final class Plots {
    private Plots() {

    }


    static abstract class SingleSeriesXYPlot<X extends Axis, Y extends Axis> extends AbstractRectangularPlot<X, Y> implements SingleSeriesPlot {
        RGBA color;

        @Override
        public RGBA getColor() {
            return color;
        }
    }

    static abstract class SingleSeriesNumericXYPlot<X extends NumericAxis, Y extends NumericAxis> extends SingleSeriesXYPlot<X, Y> {

    }

    static abstract class PairedSeriesXYPlot<X extends NumericAxis, Y extends NumericAxis> extends AbstractXYPlot<X, Y> implements PairedSeriesPlot {
        RGBA left, right;

        @Override
        public RGBA getLeftColor() {
            return left;
        }

        @Override
        public RGBA geRightColor() {
            return right;
        }
    }


    static final class ViolinPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        ViolinPlot(StatSummarySeries... series) {

        }

        @SafeVarargs
        <S extends GenericTuple<StatSummarySeries> & Pair<StatSummarySeries>> ViolinPlot(S... series) {

        }
    }

    static final class PolarPlot extends AbstractCircularPlot {
        PolarPlot(NumericSeries2D series) {
        }
    }

    static final class RugPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        RugPlot(HistogramSeries2D... series) {

        }
    }

    static final class ScatterPlot<X extends NumericAxis, Y extends NumericAxis> extends AbstractXYPlot<X, Y> {
        ScatterPlot(NumericSeries2D... series) {

        }
    }

    static final class PiePlot extends AbstractCircularPlot {
        PiePlot(LabeledSeries series) {

        }
    }

    //todo allow overlapping series
    static final class AreaPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        AreaPlot(FrequencySeries... series) {

        }
    }

    static final class VerticalBarPlot extends AbstractXYPlot<LabeledAxis, LinearAxis> {
        //TODO grouped and stacked
        VerticalBarPlot(LabeledSeries series) {

        }
    }

    static final class BoxPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        BoxPlot(StatSummarySeries... series) {

        }

        @SafeVarargs
        <S extends GenericTuple<StatSummarySeries> & Pair<StatSummarySeries>> BoxPlot(S... series) {

        }
    }

    static final class ContourPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        ContourPlot(NumericSeries3D series) {

        }
    }

    //TODO
    static final class DendrogramPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        DendrogramPlot(HierarchicalSeries series) {

        }
    }

    static final class DensityPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        DensityPlot(HistogramSeries2D series) {

        }
    }

    static final class DotPlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        DotPlot(StatSummarySeries... series) {

        }
    }

    static final class Heatmap extends AbstractXYPlot<LinearAxis, LinearAxis> {
        Heatmap(Orientation orientation, NumericSeries3D... seres) {

        }
    }

    static final class Histogram extends AbstractXYPlot<LinearAxis, LinearAxis> {
        Histogram(HistogramSeries... series) {

        }


    }

    @PlotType(name = "Histogram (2D)", compatibleSeries = HistogramSeries2D.class)
    static final class Histogram2D extends AbstractXYPlot<LinearAxis, LinearAxis> {
        Histogram2D(HistogramSeries2D series) {

        }
    }

    @PlotType(name = "Histogram (Hex-binned)", compatibleSeries = HistogramSeries2D.class)
    static final class HistogramHex extends AbstractXYPlot<LinearAxis, LinearAxis> {
        HistogramHex(HistogramSeries2D series) {

        }
    }

    static final class KDEPlot<Y extends NumericAxis> extends AbstractXYPlot<LinearAxis, Y> {
        KDEPlot(FrequencySeries series) {

        }

        <S extends GenericTuple<FrequencySeries> & Pair<FrequencySeries>> KDEPlot(S series) {

        }
    }

    @PlotType(name = "Line plot", compatibleSeries = {NumericSeries2D.class})
    static final class LinePlot<X extends NumericAxis, Y extends NumericAxis> extends SingleSeriesNumericXYPlot<X, Y> {

        LinePlot(NumericSeries2D... series) {

        }
    }

    @PlotType(name = "Table", compatibleSeries = Dataset.class)
    static final class TablePlot extends AbstractXYPlot<LinearAxis, LinearAxis> {
        TablePlot(Dataset series) {

        }

    }

    //TODO
    static final class TreePlot extends SingleSeriesXYPlot<LinearAxis, LinearAxis> {

        TreePlot(HierarchicalSeries series) {

        }


    }
}
